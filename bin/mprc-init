#!/usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const path = require('path');
const exists = require('fs').existsSync;
const inquirer = require('inquirer');
const request = require('request');
const ora = require('ora');
const semver = require('semver');
const child_process = require('child_process');
const rm = require('rimraf').sync;
const gitclone = require('git-clone');
const Download = require("download");
const os = require('os');
const fs = require('fs');

const tplPath = path.resolve(__dirname, '../template.json');
const tplJson = require(tplPath);
const pkgCfg = require('../package');

program
    .usage('<template-name> [project-name]');

//help
program.on('--help', function () {
    console.log('  Examples:')
    console.log()
    console.log(chalk.yellow('    # 使用git模板创建'))
    console.log('    $ mprc init template-name my-project')
    console.log()
});

//默认help
function help () {
    program.parse(process.argv)
    if (program.args.length < 1) return program.help()
}
help();

const template = program.args[0];
const rawName = program.args[1];
const to = path.resolve(rawName || '.');
const inPlace = !rawName || rawName === '.';
const tmpJson = tplJson[template];
const isGit = tmpJson.remoteType === 'git';
const dest = `${path.resolve(process.cwd())}/${rawName}`;

if (!tmpJson) {
    console.log(chalk.red(`template.json里没有${template}的模板信息，请添加！`));
    return;
}
if (!rawName || rawName.indexOf('/') > -1) {
    console.log(chalk.red('请输入项目名名称'));
    return;
}

//项目名已存在
if (exists(to)) {
    inquirer.prompt([{
      type: 'confirm',
      message: inPlace ?
          '在当前目录生成新项目？' :
          '该目录已存在，是否继续？',
      name: 'ok'
    }]).then( function (res) {
        if (res.ok) {
            run();
        }
    })
} else {
    const spinner = ora('正在创建目录');
    spinner.start();

    fs.mkdir(dest, function(err){
        spinner.stop();
        if(err){
            console.log( chalk.red('创建文件夹出错') );
        }else{
            console.log( chalk.green(`${rawName} 目录创建成功`));
            run();
        }
    });
}

//构建
function run() {
  console.log(chalk.yellow(     `通过${template}开始构建`    ));
  console.log();
  console.log();
  checkVersion(function () {
      if (!isGit) {
        downloadFromNpm(tmpJson);
      } else {
        downloadFromRemote(tmpJson);
      }
  })
}

//转换版本号格式
function parseVersionNumber(versionString) {
  return parseFloat(versionString.replace(/[^\d\.]/g, ''))
}

//检查node版本
function checkVersion(callback) {
    const minNodeVersion = parseVersionNumber(pkgCfg.engines.node)
    const currentNodeVersion = parseVersionNumber(process.version)

    if (minNodeVersion > currentNodeVersion) {
       return console.log(chalk.red(' You must upgrade node to >=\' + minNodeVersion + \'.x to use mprc-cli'));
    }

    request({
        url: 'https://registry.npmjs.org/mprc-cli',
        timeout: 1000
    }, function (err, res, body) {
        if (!err && res.statusCode === 200) {
            const latestVersion = JSON.parse(body)['dist-tags'].latest
            const localVersion = pkgCfg.version
            if (semver.lt(localVersion, latestVersion)) {
                console.log(chalk.green('  A newer version of mprc-cli is available.'))
                console.log()
                console.log('  latest:    ' + chalk.green(latestVersion))
                console.log('  installed: ' + chalk.red(localVersion))
                console.log()
            }
        }
        callback()
    })

}

//download from npm
function downloadFromNpm(tmpJson) {
  const spinner = ora('正在下载模板')
  spinner.start();
  const cmd = 'npm i ' + tmpJson.url + ' -d';

  child_process.exec(cmd, function (err, stdout, stderr) {
    spinner.stop();
    process.on('exit', function () {
        rm(dest + '/node_modules/');
    })
    if (err) {
      return  console.log(chalk.red('下载模板失败： ' + template + ': ' + err.message.trim()));
    }

    console.log(chalk.green('构建成功'));
  });
}

//download from remote
function downloadFromRemote(tmpJson) {
  const spinner = ora('正在下载模版');
  spinner.start();

  const repo = normalize(tmpJson.url);
  const url = tmpJson.url;

  if(isGit) {
      gitclone(url, dest, { checkout: repo.checkout }, function(err) {
         spinner.stop()
         process.on('exit', function () {
              rm(`${dest}/.git`);
         })
        if (err) {
            console.log(chalk.red('下载模板失败： ' + template + ': ' + err.message.trim() + '可能已存在干扰文件'));

            inquirer.prompt([{
                type: 'confirm',
                message: '是否删除该文件后继续构建 ?',
                name: 'ok'
            }]).then( function (res) {
                if (res.ok) {
                    delDir(dest);
                    run();
                }
            })
        } else {
            console.log(chalk.green('构建成功'));
        }
      });
  } else {
      new Download({ mode: "666", extract: true, strip: os.platform() === 'darwin' ? 1 : 0 }).get(url).dest(dest).run(function(err, files) {
          spinner.stop()
          process.on('exit', function () {
              rm(`${dest}/.git`);
          })
          console.log(chalk.red('下载失败'));
      });
  }

}

//递归删除文件家里面的所有文件
function delDir(path){
    let files = [];
    if(fs.existsSync(path)){
        files = fs.readdirSync(path);
        files.forEach((file, index) => {
            let curPath = path + "/" + file;
            if(fs.statSync(curPath).isDirectory()){
                delDir(curPath); //递归删除文件夹
            } else {
                fs.unlinkSync(curPath); //删除文件
            }
        });
        fs.rmdirSync(path);
    }
}

//格式化地址
function normalize(repo) {
    const regex = /^(https:\/\/(github))?((.+):)?([^/]+)\/([^#]+)(#(.+))?$/;
    const match = regex.exec(repo);
    const type = match[2]
    let host = match[4] || null;
    const owner = match[5];
    const name = match[6];
    const checkout = match[8] || "master";

    if (host == null) {
        if (type === "github") {
            host = "github.com";
        }
    }

    return {
        master: repo,
        type: type,
        host: host,
        owner: owner,
        name: name,
        checkout: checkout
    };
}